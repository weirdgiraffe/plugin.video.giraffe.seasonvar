# coding: utf-8

#
# Copyright © 2017 weirdgiraffe <giraffe@cyberzoo.xyz>
#
# Distributed under terms of the MIT license.
#
import os
import pytest
import re
import requests
import seasonvar.parser as parser
from seasonvar.requester import Requester
from seasonvar import day_items, season_info, episodes
from datetime import datetime, timedelta


@pytest.mark.online
def test_parse_main_page_dayblocks():
    req = Requester()
    main_page_html = req.main_page()
    dates = []
    for d, content in parser._main_page_dayblocks(main_page_html):
        dates.append(d)
        assert len(content) > 0
    assert len(dates) > 0


@pytest.mark.online
def test_parse_main_page_items_online():
    # We don't have episodes updates today because day may just start
    # So check yesterday
    yesterday = datetime.today() - timedelta(days=1)
    datestr = yesterday.strftime('%d.%m.%Y')
    changes = list(day_items(datestr))
    assert len(changes) > 0
    for c in changes:
        assert 'url' in c
        assert c['url'] != ''
        assert 'name' in c
        assert c['name'] != ''
        assert 'changes' in c
        assert c['changes'] != ''


@pytest.mark.skipif(os.getenv('TRAVIS', 'false') == 'true',
                    reason='almost all content is blocked in US')
@pytest.mark.online
def test_parse_playlists_online():
    # We don't have episodes updates today because day may just start
    # So check yesterday
    yesterday = datetime.today() - timedelta(days=1)
    datestr = yesterday.strftime('%d.%m.%Y')
    changes = list(day_items(datestr))
    assert len(changes) > 0
    info_found = 0
    pl_found = 0
    for c in changes:
        info = season_info(c['url'])
        print('\n{0} info: {1}'.format(c['url'], info))
        if info:
            info_found += 1
            pl = list(info['playlist'])
            print('\n{0} pl: {1}'.format(c['url'], pl))
            if len(pl) > 0:
                pl_found += 1
                return
    assert info_found > 0
    assert pl_found > 0


@pytest.mark.online
@pytest.mark.parametrize('term, min_suggestions', [
    ('bone', 1),
    ('привет', 1),
    ('hhhhhhhhhhhhhhhhhhhпривет', 0),
])
def test_pase_latin_search_items_online(term, min_suggestions):
    req = Requester()
    search_response = req.search(term)
    suggestions = list(parser.search_items(search_response))
    assert len(suggestions) >= min_suggestions
    for i in suggestions:
        assert i['url'] is not None


@pytest.mark.skipif(os.getenv('TRAVIS', 'false') == 'true',
                    reason='almost all content is blocked in US')
@pytest.mark.online
def test_play_online_episodes():
    info = season_info('/serial-33965-Molodoj_SHeldon-6-season.html')
    assert info is not None
    assert 'playlist' in info
    assert len(info['playlist']) > 0
    assert 'url' in info['playlist'][0]
    el = list(episodes(info['playlist'][0]['url']))
    assert len(el) > 0
    for e in el:
        assert re.match(r'.*\.(m3u8|mp4)$', e['url'])
        assert len(e['name']) != 0
        res = requests.head(e['url'])
        assert res.status_code == 200
